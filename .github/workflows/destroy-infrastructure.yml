name: Destroy Cluster Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: "Type 'DESTROY' to confirm infrastructure deletion"
        required: true
        type: string
      worker_count:
        description: "Number of worker nodes that were created"
        required: true
        type: number
        default: 2
      force_destroy:
        description: "Force destroy even if resources are protected"
        required: false
        type: boolean
        default: false

env:
  PROJECT_ID: ${{ vars.PROJECT_ID }}
  REGION: us-central1
  ZONE: "us-central1-a"

jobs:
  validate-destroy:
    name: 🔍 Validate Destroy Request
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.check.outputs.proceed }}
    steps:
      - name: 🔍 Check confirmation input
        id: check
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" = "DESTROY" ]; then
            echo "✅ Destroy confirmation validated"
            echo "proceed=true" >> "$GITHUB_OUTPUT"
          else
            echo "❌ Invalid confirmation. You must type 'DESTROY' to proceed"
            echo "proceed=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

      - name: ⚠️ Warning Message
        run: |
          echo "🚨 WARNING: This will permanently delete all infrastructure resources!"
          echo "📋 Resources that will be destroyed:"
          echo "   - All VM instances (master + workers)"
          echo "   - VPC network and subnets" 
          echo "   - Firewall rules"
          echo "   - Service accounts"
          echo "   - Any attached disks"
          echo ""
          echo "⏰ Starting destruction in 30 seconds..."
          sleep 30

  destroy-infrastructure:
    name: 🗑️ Destroy Infrastructure with Terraform
    runs-on: ubuntu-latest
    needs: validate-destroy
    if: needs.validate-destroy.outputs.proceed == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Authenticate with GCP
        id: gcp-auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: 🧰 Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: 🔧 Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.0"
          terraform_wrapper: false

      - name: 📋 Check if terraform.tfvars exists
        id: check-tfvars
        run: |
          cd terraform
          if [ -f terraform.tfvars ]; then
            echo "✅ terraform.tfvars found"
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "⚠️ terraform.tfvars not found, creating minimal version"
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: 📝 Create terraform.tfvars (if needed)
        if: steps.check-tfvars.outputs.exists == 'false'
        run: |
          cd terraform
          cat > terraform.tfvars << EOF
          project_id = "${{ env.PROJECT_ID }}"
          region     = "${{ env.REGION }}"
          zone       = "${{ env.ZONE }}"
          worker_node_count = ${{ github.event.inputs.worker_count }}
          EOF
          echo "✅ Created terraform.tfvars for destruction with ${{ github.event.inputs.worker_count }} worker nodes"

      - name: 🚀 Initialize Terraform
        run: |
          cd terraform
          terraform init
          echo "✅ Terraform initialized with GCS backend"

      - name: 🗑️ Apply Terraform destruction
        run: |
          cd terraform

          echo "🔄 Refreshing Terraform state..."
          terraform refresh

          echo "🗑️ Destroying infrastructure..."
          terraform destroy --auto-approve

          echo "✅ Infrastructure destroyed successfully"

      - name: 🧹 Cleanup state bucket (optional)
        if: github.event.inputs.force_destroy == 'true'
        run: |
          BUCKET_NAME="terraform-state-k8s-cluster-${{ env.PROJECT_ID }}"
          echo "🧹 Checking if state bucket should be cleaned up..."

          if gsutil ls gs://$BUCKET_NAME &> /dev/null; then
            echo "⚠️ State bucket still exists: $BUCKET_NAME"
            echo "💡 To completely remove everything, manually run:"
            echo "   gsutil rm -r gs://$BUCKET_NAME"
            echo "   (This will delete Terraform state history)"
          else
            echo "✅ State bucket already cleaned up"
          fi

  verify-destruction:
    name: ✅ Verify Infrastructure Destruction
    runs-on: ubuntu-latest
    needs: destroy-infrastructure
    steps:
      - name: 🧰 Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: 🔐 Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: 🔍 Verify VMs are destroyed
        run: |
          echo "🔍 Checking for remaining VM instances..."

          # Check for master node
          if gcloud compute instances describe k8s-master-node --zone=${{ env.ZONE }} &> /dev/null; then
            echo "⚠️ Master node still exists!"
            exit 1
          else
            echo "✅ Master node destroyed"
          fi

          # Check for worker nodes (up to the specified count)
          WORKERS_FOUND=0
          WORKER_COUNT=${{ github.event.inputs.worker_count }}
          echo "🔍 Checking for $WORKER_COUNT worker nodes..."

          for i in $(seq 1 $WORKER_COUNT); do
            if gcloud compute instances describe k8s-worker-node-$i --zone=${{ env.ZONE }} &> /dev/null; then
              echo "⚠️ Worker node $i still exists!"
              WORKERS_FOUND=1
            else
              echo "✅ Worker node $i destroyed"
            fi
          done

          if [ $WORKERS_FOUND -eq 0 ]; then
            echo "✅ All $WORKER_COUNT worker nodes destroyed"
          else
            echo "❌ Some worker nodes still exist!"
            exit 1
          fi

      - name: 🔍 Verify VPC is destroyed
        run: |
          echo "🔍 Checking for VPC network..."
          if gcloud compute networks describe k8s-cluster-vpc &> /dev/null; then
            echo "⚠️ VPC network still exists!"
            exit 1
          else
            echo "✅ VPC network destroyed"
          fi

      - name: 🎉 Destruction Complete
        run: |
          echo "🎉 Infrastructure destruction completed successfully!"
          echo "✅ All VM instances removed"
          echo "✅ VPC network removed"
          echo "✅ Firewall rules removed"
          echo "✅ Service accounts removed"
          echo ""
          echo "💡 Your GCP project is now clean of Kubernetes cluster resources"
